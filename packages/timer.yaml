########### configuration.yaml ###########

input_text:
  # for ui input
  timer_string:
    name: "Time (hr:min:sec)"
    pattern: '\d\d:[0,6]\d:[0,6]\d'
    initial: '00:00:00'
  # for storing action
  timer_0_task:
    name: "Timer_0 Task"
    initial: "None"
  timer_1_task:
    name: "Timer_1 Task"
    initial: "None"
  timer_2_task:
    name: "Timer_2 Task"
    initial: "None"
  timer_3_task:
    name: "Timer_3 Task"
    initial: "None"
  timer_4_task:
    name: "Timer_4 Task"
    initial: "None"
    
timer:
  # timers
  timer_0:
  timer_1:
  timer_2:
  timer_3:
  timer_4:
  
input_select:
  # list of timers for ui
  timer_list:
    name: Timers
    options:
      - timer_0
      - timer_1
      - timer_2
      - timer_3
      - timer_4
  # action options for ui
  timer_to_state:
    name: "Timer: To State"
    options:
      - 'turn_on'
      - 'turn_off'
      - 'toggle'
  # list of entities for ui - list populated in automation at boot
  timer_entity_id:
    name: "Timer: Entity ID"
    options:
      - "run 'python_script.populate_timer_entity_id' to populate"
      
      
automation:
########### automation.yaml ###########

# on boot, compile list of items to have as options for ui
  - alias: '[HA] Timer - Load entity ids on boot'
    initial_state: off
    trigger:
    - platform: homeassistant
      event: start
    condition: []
    action:
    - service: python_script.populate_timer_entity_id

  # timer finished - perform recorded action from ui
  - alias: '[HA] Timer X'
    trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.timer_0
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.timer_1
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.timer_2
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.timer_3
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.timer_4
    condition: []
    action:
    - service: script.timer_x_execute
      data_template:
        timer: '{{trigger.event.data.entity_id}}'
        
script:
  timer_x_init:
    sequence:
    # record action to be done when timer finished
    - service: script.timer_x_update_task_message
    # start timer
    - service: timer.start
      data_template:
        entity_id: >-
          {{-"timer."-}}{{- states("input_select.timer_list") -}}
        duration: >-
          {{(states('input_text.timer_string'))}}

  timer_x_execute:
    sequence:
    # execute recorded action
    - service_template: >-
        {%- if not timer -%}
          {%- set timer = 'timer.timer_1' -%}
        {%- endif -%}
        {%- set domain_name = timer.split('.') -%} 
        {%- set read_action = 'input_text.'+domain_name[1] + '_task' -%}
        {%- set action = states(read_action).split(' ') -%}
        {% set domain_name = action[1].split('.') %}
        {{- domain_name[0] -}} {{-'.'-}} {{- action[0] -}}
      data_template:
        entity_id: >-
          {%- if not timer -%}
            {%- set timer = 'timer.timer_0' -%}
          {%- endif -%}
          {%- set domain_name = timer.split('.') -%} 
          {%- set read_action = 'input_text.' + domain_name[1] + '_task' -%}
          {%- set ent_id = states(read_action).split(' ') -%}
          {{-ent_id[1]-}}
    # clear stored action
    - service: input_text.set_value
      data_template:
          entity_id: >-
            {%- if not timer -%}
              {%- set timer = 'timer.timer_0' -%}
            {%- endif -%}
            {%- set domain_name = timer.split('.') -%} 
            {{"input_text."}}{{ domain_name[1] }}{{"_task"}}
          value: 'unknown'

  timer_x_cancel:
    sequence:
      # cancel timer
    - service: timer.cancel
      data_template:
        entity_id: >-
          {{-"timer."-}}{{- states("input_select.timer_list") -}}
    # clear stored action
    - service: input_text.set_value
      data_template:
          entity_id: >-
            {%- if not timer -%}
              {%- set timer = 'timer.timer_0' -%}
            {%- endif -%}
            {%- set domain_name = timer.split('.') -%} 
            {{"input_text."}}{{ domain_name[1] }}{{"_task"}}
          value: 'unknown'

  timer_x_update_task_message:
    sequence:
    # read action to perform at end of timer
    - service: input_text.set_value
      data_template:
          entity_id: '{{"input_text."}}{{ states("input_select.timer_list") }}{{"_task"}}'
          value: '{{states("input_select.timer_to_state")}}{{" "}}{{ states("input_select.timer_entity_id") }}'